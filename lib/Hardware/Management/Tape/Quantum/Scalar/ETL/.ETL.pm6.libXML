unit    class Hypervisor::IBM::POWER::ETL:ver<0.0.1>:auth<Mark Devine (mark@markdevine.com)>;
use     URI;
use     LibXML;

our proto etl-branches (:$TAG is required, :$xml is required, Bool :$optional --> Array) is export { * };
our multi etl-branches (Str:D :$TAG is required, LibXML::Document:D :$xml is required, Bool :$optional --> Array) is export {
    my LibXML::Element $root = $xml.documentElement();
    etl-branches(:$TAG, :xml($root), :$optional);
}
our multi etl-branches (Str:D :$TAG is required, LibXML::Element:D :$xml is required, Bool :$optional --> Array) is export {
    my @xml-nodes = $xml.getChildrenByTagName($TAG);
#   my @xml-nodes = $xml.getChildrenByLocalName($TAG);
#note &?ROUTINE.name ~ ' <' ~ $TAG ~ '> ' ~ @xml-nodes.elems;
    return @xml-nodes if @xml-nodes.elems;
    return Array.new() if $optional;
    die &?ROUTINE.name ~ ': Mandatory TAG <' ~ $TAG ~ '> not found in xml source';
}
our multi etl-branches (Str:D :$TAG is required, LibXML::Element :$xml is required, Bool :$optional --> Array) is export {
    return Array.new() if $optional;
    die &?ROUTINE.name ~ ': Mandatory TAG <' ~ $TAG ~ '> not found in empty xml source';
}

our proto etl-branch (:$TAG is required, :$xml is required, Bool :$optional --> LibXML::Element) is export { * };
our multi etl-branch (Str:D :$TAG is required, LibXML::Document:D :$xml is required, Bool :$optional --> LibXML::Element) is export {
    my LibXML::Element $root = $xml.documentElement();
    etl-branch(:$TAG, :xml($root), :$optional);
};
our multi etl-branch (Str:D :$TAG is required, LibXML::Element:D :$xml is required, Bool :$optional --> LibXML::Element) is export {
    my @xml-nodes = $xml.getChildrenByTagName($TAG);
#   my @xml-nodes = $xml.getChildrenByLocalName($TAG);
#note &?ROUTINE.name ~ ' <' ~ $TAG ~ '> ' ~ @xml-nodes.elems;
    return @xml-nodes[0] if @xml-nodes.elems == 1;
    die &?ROUTINE.name ~ ': Singular TAG <' ~ $TAG ~ '> has siblings in xml source' if @xml-nodes.elems >= 1;
    return LibXML::Element if $optional;
    die &?ROUTINE.name ~ ': Mandatory TAG <' ~ $TAG ~ '> not found in xml source';
};
our multi etl-branch (Str :$TAG is required, :$xml is required, Bool :$optional --> LibXML::Element) is export {
    return LibXML::Element if $optional;
    die &?ROUTINE.name ~ ': TAG is mandatory';
}

our proto etl-text (:$TAG is required, :$xml is required, Bool :$optional --> Str) is export { * };
our multi etl-text (Str:D :$TAG is required, LibXML::Document:D :$xml is required, Bool :$optional --> Str) is export {
    my LibXML::Element $root = $xml.documentElement();
    etl-text(:$TAG, :xml($root), :$optional);
};
our multi etl-text (Str:D :$TAG is required, LibXML::Element:D :$xml is required, Bool :$optional --> Str) is export {
    my @xml-nodes = $xml.getChildrenByTagName($TAG);
#   my @xml-nodes = $xml.getChildrenByLocalName($TAG);
#note &?ROUTINE.name ~ ' <' ~ $TAG ~ '> ' ~ @xml-nodes[0].textContent.trim if @xml-nodes[0];
    return @xml-nodes[0].textContent.trim if @xml-nodes.elems == 1;
    die &?ROUTINE.name ~ ': Singular TAG <' ~ $TAG ~ '> has siblings in xml source' if @xml-nodes.elems >= 1;
    die &?ROUTINE.name ~ ': Mandatory TAG <' ~ $TAG ~ '> not found in xml source' unless $optional;
    Nil
};
our multi etl-text (Str:D :$TAG is required, LibXML::Element :$xml is required, Bool :$optional --> Str) is export {
    die &?ROUTINE.name ~ ': Mandatory TAG <' ~ $TAG ~ '> not found in empty xml source' unless $optional;
    Nil
};

our proto etl-texts (:$TAG is required, :$xml is required, Bool :$optional --> Str) is export { * };
our multi etl-texts (Str:D :$TAG is required, LibXML::Document:D :$xml is required, Bool :$optional --> Str) is export {
    my LibXML::Element $root = $xml.documentElement();
    etl-texts(:$TAG, :xml($root), :$optional);
}
our multi etl-texts (Str:D :$TAG is required, LibXML::Element :$xml is required, Bool :$optional --> Array) is export {
    my @xml-nodes = $xml.getChildrenByTagName($TAG);
#   my @xml-nodes = $xml.getChildrenByLocalName($TAG);
    unless @xml-nodes.elems {
        return Array.new() if $optional;
        die &?ROUTINE.name ~ ': Mandatory TAG <' ~ $TAG ~ '> not found in xml source';
    }
    my @texts;
    for @xml-nodes -> $xml-node {
        @texts.push: $xml-node.textContent.trim;
    }
#note &?ROUTINE.name ~ "\n\t" ~ @texts.join("\n\t");
    return @texts if @texts.elems;
    Nil;
}

our proto etl-links-URIs (:$xml is required --> Array) is export { * };
our multi etl-links-URIs (LibXML::Element:D :$xml is required --> Array) is export {
    my @hrefs;
    for $xml.getChildrenByTagName('link') -> $link {
#   for $xml.getChildrenByLocalName('link') -> $link {
        push @hrefs, URI.new($link.getAttribute('href'));
    }
#note  &?ROUTINE.name ~ "\n\t" ~ @hrefs.join("\n\t");
    return @hrefs;
}
our multi etl-links-URIs (LibXML::Element :$xml is required --> Array) is export {
    return Array.new();
}

=finish
